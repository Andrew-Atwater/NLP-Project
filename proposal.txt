Proposal - Lee, Drew, Andrew
Classification using the travel review database
(worded separately in Google Docs - commit copy-pasted to here)

NLP Project Proposal - Classification of Reviews
Lee, Drew, and Andrew

	Of the three NLP problem types listed, our group chose the classification type, where the user will upload a dataset and 
    our program will predict labels to classify those documents with. The domain we chose is in reviews, because we 
    would like to implement a feature that not only predicts whether your review input is positive or negative, but can also 
    compare that review to the weighted average of all other reviews on that recipe in the database (weight assigned based on 
    thumbs up/thumbs down for each review). For the specific dataset, we chose Recipe Reviews and User Feedback. 
    (https://archive.ics.uci.edu/dataset/911/recipe+reviews+and+user+feedback +dataset)  
    This dataset provides us with a review number, recipe number, recipe code, recipe name, comment ID, user ID, username, 
    user reputation, created at, reply count, thumbs up count, thumbs down count, best review score, review number of stars, 
    and the actual review text. The only information we’ll need to pull from this database to train our program will be the 
    thumbs up count, thumbs down count, recipe name, and actual review text. If needed later, we could also present the user 
    with sorted reviews by whether they were positive or negative as well as how popular each review was for later development 
    in this project beyond the single review entry and comparison. When we reach the front-end, instead of entering a csv file 
    like how we’ll likely train and create our initial database (over 18,000 reviews if needed), we can just ask the user for 
    the review content, recipe, and whether that review received any thumbs up/thumbs down. Using that user input we’ll update 
    our database with the new review, and output whether that review is likely to be positive or negative, as well as whether 
    the weighted average reviews for that recipe are positive/negative. We chose the review domain because it seemed the most 
    interesting to us, we chose recipes because of the importance of food being tasty, but also very subjective. Reviews are 
    very important when choosing a recipe, so having a program to not only predict whether a recipe review is positive or 
    negative, but also then add that to a database and compare it to the weighted average of reviews for the recipe provides 
    a level of trustworthiness and how indicative that review’s positive/negative score is in comparison to other reviews, 
    avoiding skew.



UML Diagram: https://lucid.app/lucidchart/38a4b104-0874-486c-a98e-09707386e38c/edit?viewport_loc=39%2C-113%2C2469%2C1416%2CHWEp-vi-RSFO&invitationId=inv_6f1c1b53-8906-4cd7-8a97-8d115c6fdf36

